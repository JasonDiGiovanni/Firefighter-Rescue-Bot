/*
 * adc.c
 */

#include <stdint.h>
#include <adc.h>
#include <REF_tm4c123gh6pm.h>


void adc_init(void){
    /*
     * ADC Active Sample Sequencer (ADCACTSS): ADC#_ACTSS_R
    ADC Raw Interrupt Status (ADCRIS): ADC#_RIS_R
    ADC Interrupt Mask (ADCIM): ADC#_IM_R
    ADC Interrupt Status and Clear (ADCISC): ADC#_ISC_R
    ADC Event Multiplexer Select (ADCEMUX): ADC#_EMUX_R
    ADC Processor Sample Sequence Initiate (ADCPSSI): ADC#_PSSI_R
    ADC Sample Sequence Input Multiplexer Select (0-3) (ADCSSMUX0-3): ADC#_SSMUX#_R
    ADC Sample Sequence Control (0-3) (ADCSSCTL0-3): ADC#_SSCTL#_R
    ADC Sample Sequence Result FIFO (0-3) (ADCSSFIFO0-3): ADC#_SSFIFO#_R
    ADC Clock Configuration (ADCCC): ADC#_CC_R
    ADC Run Mode Clock Gating Control (RCGCADC): SYSCTL_RCGCADC_R
    ADC Peripheral Ready (PRADC): SYSCTL_PRADC_R
     */
    SYSCTL_RCGCADC_R |= 0x01;
    SYSCTL_RCGCGPIO_R |= 0x02;
    /*while((SYSCTL_PRADC_R & 0x01) == 0){

    }*/

    while((SYSCTL_PRGPIO_R & 0x2) != 0x2){
        GPIO_PORTB_DIR_R &= ~0x10;
        GPIO_PORTB_AFSEL_R |= 0x10;
        GPIO_PORTB_DEN_R &= ~0x10;
        GPIO_PORTB_AMSEL_R |= ~0x10;

        ADC0_ACTSS_R &= ~0x0008;
        ADC0_EMUX_R &= ~0xF000;
        ADC0_SSMUX3_R &= ~0x000F;
        ADC0_SSMUX3_R &= 10; //set channel // WRONG #
        ADC0_SSCTL3_R = 0x0002; // 13) no TS0 D0, yes IE0 END0
        ADC0_IM_R &= ~0x0008; // 14) disable SS3 interrupts
        ADC0_ACTSS_R |= 0x0008;
    }


}


uint16_t adc_read(void){
    uint16_t result;
    ADC0_PSSI_R |= 0x0008; // 1) initiate
    while((ADC0_RIS_R & 0x08)==0){}; // 2) wait for conversion done
    result = ADC0_SSFIFO3_R & 0xFFF; // 3) read result
    ADC0_ISC_R = 0x0008; // 4) acknowledge completion
    return result;
}
